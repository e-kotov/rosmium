% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sort.R
\name{osm_sort}
\alias{osm_sort}
\title{Sort OSM files}
\usage{
osm_sort(
  input_paths,
  output_path,
  strategy = c("simple", "multipass"),
  input_format = NULL,
  output_format = NULL,
  fsync = FALSE,
  generator = NULL,
  overwrite = FALSE,
  output_header = NULL,
  echo_cmd = FALSE,
  echo = TRUE,
  spinner = TRUE,
  verbose = FALSE,
  progress = FALSE
)
}
\arguments{
\item{input_paths}{Character vector with paths to one or more existing
OSM files.}

\item{output_path}{String. Path for the sorted output file.  The format is
inferred from the file extension unless \code{output_format} is supplied.}

\item{strategy}{Character (length 1). Either \code{"simple"} (in-memory,
single pass) or \code{"multipass"} (three passes, lower memory).}

\item{input_format}{Optional string. Force the input format
(for example \code{"osm"}, \code{"pbf"}, \code{"osc"}).
If \code{NULL}, the format is autodetected.}

\item{output_format}{Optional string. Force the output format
(for example \code{"osm"}, \code{"pbf"}, \code{"osc"}).
If \code{NULL}, the format is autodetected.}

\item{fsync}{Logical. If \code{TRUE}, call \code{fsync} after writing the
output file to flush buffers.  Default \code{FALSE}.}

\item{generator}{Optional string. Value for the \code{generator} header
field.  Default is \code{"osmium/<version>"}.}

\item{overwrite}{Logical. Allow an existing \code{output_path} to be
overwritten.  Default \code{FALSE}.}

\item{output_header}{Named character vector of additional header options.
Each name is a header key, each value the header value.  A value of
\code{""} writes \code{OPTION!}.  Default \code{NULL}.}

\item{echo_cmd}{A logical. Whether to print the Osmium command generated by
the function call to the screen. Defaults to \code{FALSE}.}

\item{echo}{A logical. Whether to print the standard output and error
generated by the Osmium call to the screen. Defaults to \code{TRUE}.}

\item{spinner}{A logical. Whether to show a reassuring spinner while the
Osmium call is being executed. Defaults to \code{TRUE}.}

\item{verbose}{A logical. Whether to display detailed information on the
running command. Defaults to \code{FALSE}.}
}
\value{
Invisibly returns the normalised \code{output_path}.
}
\description{
{
#' This is a wrapper for \strong{\href{https://docs.osmcode.org/osmium/latest/osmium-sort.html}{\verb{osmium sort}}}. It combines the content of one or more input files and writes a single file whose objects are strictly ordered by
\itemize{
\item type (node, way, relation),
\item ID (negative IDs first, then positive, each by absolute value), and
\item version (ascending).
}

Duplicate objects are \strong{not} removed; they are simply written in
sorted order. To remove duplicate objects, use \code{\link[=osm_merge]{osm_merge()}}, but please sort all input files first.
\subsection{Sorting strategies}{\tabular{llll}{
   value \tab passes \tab memory use \tab speed \cr
   \code{"simple"}  \emph{(default)} \tab 1 \tab keeps \strong{all data in RAM} - expect roughly \strong{10 x} the on-disk size of a \code{.pbf} or \code{.osm.bz2} file \tab fastest \cr
   \code{"multipass"} \tab 3 \tab reads nodes, ways, relations in separate passes - uses \strong{much less RAM} \tab slower \cr
}


The multipass strategy cannot be used when reading from \code{stdin}.
}

\subsection{Memory usage}{

With the default \code{"simple"} strategy, \code{osmium sort}
stores the entire data set in main memory; the rule of thumb from
the manual is about 10x times the on-disk size of the input
file. For large extracts or limited RAM, switch to
\code{strategy = "multipass"}.
}
}
}
\examples{
\dontshow{if (identical(tolower(Sys.getenv("NOT_CRAN")), "true")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
pbf <- system.file("extdata/cur.osm.pbf", package = "rosmium")

# Simple one‑pass sort (fastest, high RAM use)
out_simple <- tempfile(fileext = ".osm.pbf")
osm_sort(pbf, out_simple, overwrite = TRUE)

# Multipass sort (lower RAM use)
out_multi <- tempfile(fileext = ".osm.pbf")
osm_sort(pbf, out_multi, strategy = "multipass", overwrite = TRUE)
\dontshow{\}) # examplesIf}
}
