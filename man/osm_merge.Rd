% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/merge.R
\name{osm_merge}
\alias{osm_merge}
\title{Merge several sorted OSM files}
\usage{
osm_merge(
  input_paths,
  output_path,
  check_integrity = "no",
  stop_on_integrity_fail = FALSE,
  sort_before_merge = FALSE,
  input_format = NULL,
  output_format = NULL,
  fsync = FALSE,
  generator = NULL,
  overwrite = FALSE,
  output_header = NULL,
  with_history = FALSE,
  echo_cmd = FALSE,
  echo = TRUE,
  spinner = TRUE,
  verbose = FALSE,
  progress = FALSE
)
}
\arguments{
\item{input_paths}{Character vector. Paths to one or more \emph{existing}
\strong{(preferably already-sorted)} OSM files.}

\item{output_path}{String. Where to write the merged result.}

\item{check_integrity}{One of:
\itemize{
\item \code{"no"} \emph{(default)}: no checks are made,
\item \code{"simple"}: runs \code{osm_check_refs(check_relations = FALSE)} to check
that \emph{nodes referenced by ways} are present,
\item \code{"full"}: runs \code{osm_check_refs(check_relations = TRUE)} to check that
\emph{all references inside relations} are present.
}}

\item{stop_on_integrity_fail}{Logical. Abort on failed integrity check?
Default \code{FALSE}.}

\item{sort_before_merge}{Logical. If \code{TRUE}, force-sort each input with
\code{\link[=osm_sort]{osm_sort()}} before merging.  Default \code{FALSE}.}

\item{input_format, output_format}{Force I/O formats (\code{"pbf"}, \code{"osm"}, ...).
\code{NULL} lets Osmium autodetect.}

\item{fsync}{Logical. Pass \strong{\code{--fsync}} to flush buffers.}

\item{generator}{Optional string for \strong{\code{--generator}} header tag.}

\item{overwrite}{Logical. Allow overwriting \code{output_path}.}

\item{output_header}{Named character vector of extra header options
(\code{OPTION = "value"} or \code{OPTION = ""} to replicate input header via
the \verb{OPTION!} shorthand).}

\item{with_history}{Logical. Pass \strong{\code{--with-history}} to Osmium.}

\item{echo_cmd}{A logical. Whether to print the Osmium command generated by
the function call to the screen. Defaults to \code{FALSE}.}

\item{echo}{A logical. Whether to print the standard output and error
generated by the Osmium call to the screen. Defaults to \code{TRUE}.}

\item{spinner}{A logical. Whether to show a reassuring spinner while the
Osmium call is being executed. Defaults to \code{TRUE}.}

\item{verbose}{A logical. Whether to display detailed information on the
running command. Defaults to \code{FALSE}.}

\item{progress}{A logical. Whether to display a progress bar while running
the command. Defaults to \code{FALSE}.}
}
\value{
(Invisibly) the normalised \code{output_path}.
}
\description{
{
Merges the content of all OSM files given on the command line into one large OSM file. Objects in all files must be sorted by type, ID, and version. The results will also be sorted in the same way. Objects that appear in multiple input files will only be in the output once. This is a wrapper for \strong{\href{https://docs.osmcode.org/osmium/latest/osmium-merge.html}{\verb{osmium merge}}} that can optionally (1) run referential-integrity pre-flight checks with \code{\link[=osm_check_refs]{osm_check_refs()}}, (2) force-sort each input with \code{\link[=osm_sort]{osm_sort()}}, and then (3) perform the actual merge.
\subsection{1. Referential-integrity checks}{

Set \code{check_integrity} to\tabular{lll}{
   value \tab what is checked \tab implementation \cr
   \code{"no"} \emph{(def.)} \tab nothing \tab - \cr
   \code{"simple"} \tab \emph{nodes referenced by ways} are present \tab \code{osm_check_refs(check_relations = FALSE)} \cr
   \code{"full"} \tab additionally checks \emph{all references inside relations} \tab \code{osm_check_refs(check_relations = TRUE)} \cr
}


If any check returns exit-status \code{1} (missing refs) \strong{and}
\code{stop_on_integrity_fail = TRUE}, the function \strong{aborts} before merging.
}

\subsection{2. Optional \emph{force-sort} step}{

If \code{sort_before_merge = TRUE}, each input file is first piped through
\code{\link[=osm_sort]{osm_sort()}} (using the default \code{"simple"} strategy) into a temporary
file.  This strategy is fast but can require \strong{about 10x the on-disk size
of a \code{.pbf}/\code{.osm.bz2} file in memory}.  See \code{\link[=osm_sort]{osm_sort()}} for
details.  Temporary files are deleted automatically at the end of the
R session.  If you need permanent, sorted copies, call
\code{\link[=osm_sort]{osm_sort()}} yourself and set the desired output path.
}

\subsection{3. Memory usage during merge}{

\verb{osmium merge} itself needs only small buffers, but when merging \strong{many}
files those buffers can add up.  The optional sorting step generally
dominates RAM usage.

}
}
}
\examples{
\dontshow{if (identical(tolower(Sys.getenv("NOT_CRAN")), "true")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
pbf <- system.file("extdata/cur.osm.pbf", package = "rosmium")

# 1. get header bbox (an sf::st_bbox)
orig_bbox <- osm_get_bbox(pbf)

# 2. split bbox in two halves by longitude
midx <- (orig_bbox["xmin"] + orig_bbox["xmax"]) / 2

bbox1 <- sf::st_bbox(
  c(
    xmin = orig_bbox[["xmin"]],
    ymin = orig_bbox[["ymin"]],
    xmax = unname(midx),
    ymax = orig_bbox[["ymax"]]
  ),
  crs = sf::st_crs(orig_bbox)
)

bbox2 <- sf::st_bbox(
  c(
    xmin = unname(midx),
    ymin = orig_bbox[["ymin"]],
    xmax = orig_bbox[["xmax"]],
    ymax = orig_bbox[["ymax"]]
  ),
  crs = sf::st_crs(orig_bbox)
)

# 3. extract two halves
f1 <- extract(
  pbf,
  bbox1,
  tempfile(fileext = ".osm.pbf"),
  overwrite = TRUE,
  echo = FALSE,
  spinner = FALSE
)
f2 <- extract(
  pbf,
  bbox2,
  tempfile(fileext = ".osm.pbf"),
  overwrite = TRUE,
  echo = FALSE,
  spinner = FALSE
)

# 4. merge while ensuring sort
merge_out <- tempfile(fileext = ".osm.pbf")
merged <- osm_merge(
  input_paths = c(f1, f2),
  output_path = merge_out,
  sort_before_merge = TRUE,
  overwrite = TRUE,
  echo = FALSE,
  spinner = FALSE
)

# 5. compute bbox
final_bbox <- osm_get_bbox(merged, calculate = TRUE)
\dontshow{\}) # examplesIf}
}
